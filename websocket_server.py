#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CloudBell App - WebSocket Server
–ü—Ä–æ—Å—Ç–∏–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ö–º–∞—Ä–Ω–æ—ó —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—ó –∑–≤—É–∫—É
"""

import asyncio
import websockets
import json
import logging
import os
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

class AudioServer:
    """
    WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—ó –∞—É–¥—ñ–æ.
    """
    
    def __init__(self):
        self.connected_clients = set()
        self.audio_data = None
        
    async def register_client(self, websocket):
        """
        –†–µ—î—Å—Ç—Ä—É—î –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞.
        """
        self.connected_clients.add(websocket)
        logging.info(f"–ö–ª—ñ—î–Ω—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ. –í—Å—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤: {len(self.connected_clients)}")
        
    async def unregister_client(self, websocket):
        """
        –í—ñ–¥–∫–ª—é—á–∞—î –∫–ª—ñ—î–Ω—Ç–∞.
        """
        self.connected_clients.discard(websocket)
        logging.info(f"–ö–ª—ñ—î–Ω—Ç –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ. –í—Å—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤: {len(self.connected_clients)}")
        
    async def handle_client(self, websocket, path):
        """
        –û–±—Ä–æ–±–ª—è—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞.
        """
        await self.register_client(websocket)
        
        try:
            async for message in websocket:
                try:
                    data = json.loads(message)
                    
                    if data.get('type') == 'audio':
                        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞—É–¥—ñ–æ –¥–∞–Ω—ñ
                        self.audio_data = data
                        
                        # –†–æ–∑—Å–∏–ª–∞—î–º–æ –≤—Å—ñ–º –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–º –∫–ª—ñ—î–Ω—Ç–∞–º
                        if self.connected_clients:
                            message_to_send = json.dumps(data)
                            disconnected = set()
                            
                            for client in self.connected_clients:
                                try:
                                    await client.send(message_to_send)
                                except websockets.exceptions.ConnectionClosed:
                                    disconnected.add(client)
                            
                            # –í–∏–¥–∞–ª—è—î–º–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
                            for client in disconnected:
                                self.connected_clients.discard(client)
                    
                    elif data.get('type') == 'sound_event':
                        # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–¥—ñ—ó –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—ñ–≤
                        logging.info(f"üéµ –ó–≤—É–∫: {data.get('file')} ({data.get('event')})")
                        
                        # –†–æ–∑—Å–∏–ª–∞—î–º–æ –≤—Å—ñ–º –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–º –∫–ª—ñ—î–Ω—Ç–∞–º
                        if self.connected_clients:
                            message_to_send = json.dumps(data)
                            disconnected = set()
                            
                            for client in self.connected_clients:
                                try:
                                    await client.send(message_to_send)
                                except websockets.exceptions.ConnectionClosed:
                                    disconnected.add(client)
                            
                            # –í–∏–¥–∞–ª—è—î–º–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
                            for client in disconnected:
                                self.connected_clients.discard(client)
                                
                    elif data.get('type') == 'ping':
                        # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ ping
                        await websocket.send(json.dumps({'type': 'pong'}))
                        
                except json.JSONDecodeError:
                    logging.error("–ù–µ–≤—ñ—Ä–Ω–∏–π JSON")
                except Exception as e:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
                    
        except websockets.exceptions.ConnectionClosed:
            pass
        finally:
            await self.unregister_client(websocket)

async def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å–µ—Ä–≤–µ—Ä–∞.
    """
    server = AudioServer()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ä—Ç –∑ environment –∑–º—ñ–Ω–Ω–æ—ó (–¥–ª—è —Ö–º–∞—Ä–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤)
    PORT = int(os.environ.get("PORT", 8765))
    
    print("CloudBell App - WebSocket Server")
    print("=" * 50)
    print(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ ws://0.0.0.0:{PORT}")
    print("–î–ª—è –∑—É–ø–∏–Ω–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä –Ω–∞ –≤—Å—ñ—Ö —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö (0.0.0.0)
    async with websockets.serve(server.handle_client, "0.0.0.0", PORT):
        await asyncio.Future()  # –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–∞–∑–∞–≤–∂–¥–∏

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ!")
