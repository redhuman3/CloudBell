#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CloudBell App - Raspberry Pi Receiver
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É –∑ —Ö–º–∞—Ä–∏ –Ω–∞ Raspberry Pi
"""

import sys
import os
import json
import asyncio
import websockets
import pyaudio
import base64
import threading
import queue
import logging
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞—É–¥—ñ–æ
AUDIO_CHUNK_SIZE = 1024
AUDIO_FORMAT = pyaudio.paInt16
AUDIO_CHANNELS = 1
AUDIO_RATE = 44100

class RaspberryPiReceiver:
    """
    –ö–ª–∞—Å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—É–∫—É –∑ —Ö–º–∞—Ä–∏ –Ω–∞ Raspberry Pi.
    """
    
    def __init__(self, server_url: str):
        self.server_url = server_url
        self.is_receiving = False
        self.websocket = None
        self.audio_queue = queue.Queue()
        self.stream = None
        self.p = None
        
    def start_receiving(self):
        """
        –ü–æ—á–∏–Ω–∞—î –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—É–∫—É –∑ —Ö–º–∞—Ä–∏.
        """
        if self.is_receiving:
            return
            
        try:
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ PyAudio
            self.p = pyaudio.PyAudio()
            self.stream = self.p.open(
                format=AUDIO_FORMAT,
                channels=AUDIO_CHANNELS,
                rate=AUDIO_RATE,
                output=True,
                frames_per_buffer=AUDIO_CHUNK_SIZE
            )
            
            self.is_receiving = True
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ WebSocket –∫–ª—ñ—î–Ω—Ç
            threading.Thread(target=self.websocket_client, daemon=True).start()
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—É–¥—ñ–æ
            threading.Thread(target=self.play_audio, daemon=True).start()
            
            logging.info("[RASPBERRY_PI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—É–∫—É —Ä–æ–∑–ø–æ—á–∞—Ç–æ")
            return True
            
        except Exception as e:
            logging.error(f"[RASPBERRY_PI] –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
            return False
    
    def stop_receiving(self):
        """
        –ó—É–ø–∏–Ω—è—î –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—É–∫—É.
        """
        self.is_receiving = False
        
        if self.stream:
            self.stream.stop_stream()
            self.stream.close()
            self.stream = None
            
        if self.p:
            self.p.terminate()
            self.p = None
            
        logging.info("[RASPBERRY_PI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—É–∫—É –∑—É–ø–∏–Ω–µ–Ω–æ")
    
    def websocket_client(self):
        """
        WebSocket –∫–ª—ñ—î–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞—É–¥—ñ–æ.
        """
        async def receive_audio():
            try:
                async with websockets.connect(self.server_url) as websocket:
                    self.websocket = websocket
                    logging.info("[RASPBERRY_PI] –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ —Å–µ—Ä–≤–µ—Ä–∞")
                    
                    async for message in websocket:
                        if not self.is_receiving:
                            break
                            
                        try:
                            data = json.loads(message)
                            if data.get('type') == 'audio':
                                # –î–µ–∫–æ–¥—É—î–º–æ –∞—É–¥—ñ–æ –¥–∞–Ω—ñ
                                audio_data = base64.b64decode(data['data'])
                                self.audio_queue.put(audio_data)
                                
                        except Exception as e:
                            logging.error(f"[RASPBERRY_PI] –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {e}")
                            
            except Exception as e:
                logging.error(f"[RASPBERRY_PI] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
        
        asyncio.run(receive_audio())
    
    def play_audio(self):
        """
        –í—ñ–¥—Ç–≤–æ—Ä—é—î –æ—Ç—Ä–∏–º–∞–Ω–∏–π –∞—É–¥—ñ–æ.
        """
        while self.is_receiving:
            try:
                audio_data = self.audio_queue.get(timeout=0.1)
                if self.stream:
                    self.stream.write(audio_data)
            except queue.Empty:
                continue
            except Exception as e:
                logging.error(f"[RASPBERRY_PI] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è: {e}")
                break

def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –Ω–∞ Raspberry Pi.
    """
    print("üçì CloudBell App - Raspberry Pi Receiver")
    print("=" * 50)
    
    # URL —Å–µ—Ä–≤–µ—Ä–∞ (–º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏)
    server_url = input("–í–≤–µ–¥—ñ—Ç—å URL WebSocket —Å–µ—Ä–≤–µ—Ä–∞ (Enter –¥–ª—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º): ").strip()
    if not server_url:
        server_url = "wss://cloudbell-audio-server.herokuapp.com/ws"
    
    print(f"–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞: {server_url}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ—Å–∏–≤–µ—Ä
    receiver = RaspberryPiReceiver(server_url)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—É–∫—É
        if receiver.start_receiving():
            print("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—É–∫—É —Ä–æ–∑–ø–æ—á–∞—Ç–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏.")
            
            # –û—á—ñ–∫—É—î–º–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏
            while True:
                try:
                    import time
                    time.sleep(1)
                except KeyboardInterrupt:
                    break
        else:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—É–∫—É!")
            
    except KeyboardInterrupt:
        print("\nüõë –ó—É–ø–∏–Ω–∫–∞...")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    finally:
        receiver.stop_receiving()
        print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
